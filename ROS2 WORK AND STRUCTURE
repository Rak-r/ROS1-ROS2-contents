#######################################ROS1-ROS2 PORTING################################################################:

Podacr package structure:
Podcar
..>>>>launch
	.>all launch files of the podcar (slam, nav2, controls, worlds)
..>>>>mdoels
	..all models (of podcar, world, lincolnINB, LeedsUni)
..>>>>config
	..contains all the configurations/params in yaml format.
......scripts
	..all scripts for controlling(joystick, arduino etc).
......msg
	..contains the msg files in .msg extension.
......If package is of python build type then it will have setup.py, setup.config, resources directry as well while if the packge build type is CMake then it will have Package.xml, CMakeLists.txt

Work:

1.) Started with the podcar package pf ROS1  and made chnages to the launch files present.

Major attention required: The launch files maybe of xml or python format but in ros2 there has been some changes in the name of arguements and attributes like type>exec, ns>namespace. Also the Navigation stack has been upgraded wuth some more functionalities and there has been chnages in the terms and packages. Howeverthe basic concept is the same as ROS1.

PACKAGES WHICH HAS BEEN CHANGED ARE:

1.)The Gmapping package for the mapping task in ROS1 with other skam packages like Karto, cartographer and the building slam_toolbox which steve mckenzie has introduced in ROS2, it basically offers structured functionality. Some parameters have been renamed but does the same task.

2.)The Adaptive Monte Carlo Localization package of the nav_stack has te same adopted to nav2.

3.)map_server apckage has been renamed to nav2_map_server: This package implements a server to handle the request of the map loading and also gives a map topic (map_server/map). There is also a map saver server running in the backend which saves the generated map according to the service requests.

4.) nav2_plannar replaces the global planner in ROS2 and nav2_controller replaced the local planner.

5.) What is planner, controller, behaviour and smoother servers?

Planners: Planner serveer are used to compute the global plan or the shortest path.

Controllers: These servers are used to follow he the global plan generated by the planner. These were called a slocal planners in ROS1.

Behaviors: For instance, suppose the robot has been stuck at some point due to some obstackle coming in ts way. The behaviour servers makes it possible for the robit to act in thses king=d of scenarios through the actions like turning back, spinning which brings the robot into obstcakle free zone.

Smoothers: Sometimes we cannot fully rely on the path provided/computed by the plnner so we use the smoother server swhich helps in refining the planer path.

6.) Waypoint_Follower: Navigation 2 features a nav2_waypoint_follower which has a plugin interface and helps to complete a specific task/operation for example; bringing the cup etc.

STATE ETIMATION: THIS TASK IS DONE IN TWO STAGES:  

map>odom frame transformation isdone using different methods (SLAM, localization, mapping) and odom>base_frame is done using various odometry systems such as Wheel encoders, visual cameras, IMUS and fusion of these.

Costmaps: Costmaps are the 2D occupancy grid maps which represents the environment for the robot. In these grids, the cell stores the value between (0-254) and the one with the value 0 means = No Occupancy while cell with value 254 = Lethally Occupied.
Costmaps have different layers which consist different information about the environment.

1.) Static layer: Represents the map section of the costmap.

2.) Obstacle layer: Represents the objects detected by the sensors that publishes either or both LaserScan and PointCloud messages.

3.) Voxel layer: Does the same thing as that of the obstacle layer but handles the 3D data.

4.) Inflation layer: Represents the added cost values around the obstacles.


Joint state Publisher: In order to move the robot for a specific task or operation it is important to have the full detailed data of veery joint of the robot like the angle for the moving joint, displacemnet of linear actuator and velocity. Joint state publisher is used to keeping the track of this data and sends it to Robot state Publisher.

Robot state Publisher: This recieves the data from the Joint state publisher and outputs the position and orientation of each coordinate frame and this data is pubishes to the TF2 library/package of ROS2 which keeps the track record for all the co-ordinate frames over time.
